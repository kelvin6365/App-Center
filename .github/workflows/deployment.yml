name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'
      - name: Generate GITHUB_SHA
        id: github-sha
        shell: bash
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          echo "::set-output name=sha::$SHORT_SHA"
      - run: pnpm install
        if: ${{ steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true' }}
      - name: Build Frontend
        if: steps.filter.outputs.frontend == 'true'
        run: pnpm nx build frontend
      - name: Build Backend
        if: steps.filter.outputs.backend == 'true'
        run: pnpm nx build backend
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build Frontend container image
        if: steps.filter.outputs.frontend == 'true'
        run: docker build -f ./apps/frontend/Dockerfile . -t registry.digitalocean.com/two-rocks-studio/app-center/frontend:${{steps.github-sha.outputs.sha}}
      - name: Build Backend container image
        if: steps.filter.outputs.backend == 'true'
        run: docker build -f ./apps/backend/Dockerfile . -t registry.digitalocean.com/two-rocks-studio/app-center/backend:${{steps.github-sha.outputs.sha}}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        if: ${{ steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true' }}
        run: doctl registry login --expiry-seconds 1200

      - name: Push frontend image to DigitalOcean Container Registry
        if: steps.filter.outputs.frontend == 'true'
        run: docker push registry.digitalocean.com/two-rocks-studio/app-center/frontend:${{steps.github-sha.outputs.sha}}
      - name: Push backend image to DigitalOcean Container Registry
        if: steps.filter.outputs.backend == 'true'
        run: docker push registry.digitalocean.com/two-rocks-studio/app-center/backend:${{steps.github-sha.outputs.sha}}

      - name: DigitalOcean App Platform deployment
        if: steps.filter.outputs.frontend == 'true'
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: app-center
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          images: '[
            {
            "name": "app-center-frontend",
            "image":{
            "registry_type": "DOCR",
            "repository": "app-center/frontend",
            "tag": "${{steps.github-sha.outputs.sha}}"
            }
            }
            ]'

      - name: DigitalOcean App Platform deployment
        if: steps.filter.outputs.backend == 'true'
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: app-center
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          images: '[
            {
            "name": "app-center-backend",
            "image":{
            "registry_type": "DOCR",
            "repository": "app-center/backend",
            "tag": "${{steps.github-sha.outputs.sha}}"
            }
            }
            ]'
